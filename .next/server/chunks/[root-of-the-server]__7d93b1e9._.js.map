{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/asset/Documents/IT%20project/aisolar/app/api/transcribe/route.ts"],"sourcesContent":["// ==========================================\n// FILE: app/api/transcribe/route.ts (WITH CHUNKING)\n// ==========================================\nimport { NextRequest } from 'next/server'\nimport { tmpdir } from 'os'\nimport { promises as fs } from 'fs'\nimport { createReadStream } from 'fs'\nimport path from 'path'\nimport { spawn } from 'child_process'\nimport OpenAI from 'openai'\n\nexport const runtime = 'nodejs'\nexport const preferredRegion = ['fra1', 'arn1', 'ams1']\n\nconst MAX_FILE_SIZE_MB = 20 // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞\nconst CHUNK_DURATION_SEC = 600 // 10 –º–∏–Ω—É—Ç –Ω–∞ —á–∞–Ω–∫\n\nfunction ndjson(out: ReadableStreamDefaultController, obj: any) {\n  out.enqueue(new TextEncoder().encode(JSON.stringify(obj) + '\\n'))\n}\n\nfunction formatElapsedTime(ms: number): string {\n  const totalSec = Math.floor(ms / 1000)\n  const min = Math.floor(totalSec / 60)\n  const sec = totalSec % 60\n  return `${min}–º ${sec}—Å`\n}\n\nasync function saveBlobToTmp(file: File): Promise<string> {\n  const arrayBuffer = await file.arrayBuffer()\n  const buffer = Buffer.from(arrayBuffer)\n  const safeName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_')\n  const p = path.join(tmpdir(), `${Date.now()}-${safeName}`)\n  await fs.writeFile(p, buffer)\n  return p\n}\n\nasync function getAudioDuration(filePath: string): Promise<number> {\n  return new Promise((resolve, reject) => {\n    const proc = spawn('ffprobe', [\n      '-v', 'error',\n      '-show_entries', 'format=duration',\n      '-of', 'default=noprint_wrappers=1:nokey=1',\n      filePath\n    ])\n    \n    let output = ''\n    proc.stdout.on('data', (data) => { output += data.toString() })\n    proc.on('close', (code) => {\n      if (code === 0) {\n        const duration = parseFloat(output.trim())\n        resolve(isNaN(duration) ? 0 : duration)\n      } else {\n        reject(new Error('ffprobe failed'))\n      }\n    })\n  })\n}\n\nasync function ffmpegToWav(inputPath: string): Promise<string> {\n  const out = path.join(tmpdir(), `${path.parse(inputPath).name}.wav`)\n  await new Promise<void>((resolve, reject) => {\n    const args = ['-i', inputPath, '-vn', '-ac', '1', '-ar', '16000', '-f', 'wav', out]\n    const proc = spawn('ffmpeg', args)\n    proc.on('error', reject)\n    proc.on('close', (code) =>\n      code === 0 ? resolve() : reject(new Error(`ffmpeg failed: ${code}`))\n    )\n  })\n  return out\n}\n\nasync function splitAudioToChunks(inputPath: string, chunkSeconds: number): Promise<string[]> {\n  const outDir = path.join(tmpdir(), `chunks-${Date.now()}`)\n  await fs.mkdir(outDir, { recursive: true })\n\n  await new Promise<void>((resolve, reject) => {\n    const args = [\n      '-i', inputPath,\n      '-f', 'segment',\n      '-segment_time', chunkSeconds.toString(),\n      '-c', 'copy',\n      path.join(outDir, 'chunk%03d.wav')\n    ]\n    const proc = spawn('ffmpeg', args)\n    proc.on('error', reject)\n    proc.on('close', (code) => \n      code === 0 ? resolve() : reject(new Error('ffmpeg split failed'))\n    )\n  })\n\n  const files = await fs.readdir(outDir)\n  return files\n    .filter(f => f.endsWith('.wav'))\n    .sort()\n    .map(f => path.join(outDir, f))\n}\n\nasync function transcribeOpenAI(\n  wavPath: string,\n  language?: string\n): Promise<{ text: string }> {\n  const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })\n  const resp = await client.audio.transcriptions.create({\n    file: createReadStream(wavPath) as any,\n    model: 'whisper-1',\n    language: language && language !== 'auto' ? language : undefined\n  })\n  return { text: resp.text }\n}\n\nasync function maybeTranslate(text: string, target?: string): Promise<string> {\n  if (!target || !target.trim()) return text\n  const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })\n  const r = await client.chat.completions.create({\n    model: 'gpt-4o-mini',\n    messages: [\n      {\n        role: 'system',\n        content: `Translate the following text to ${target}. Return only the translated text.`\n      },\n      { role: 'user', content: text }\n    ],\n    temperature: 0\n  })\n  return r.choices?.[0]?.message?.content?.toString?.() || text\n}\n\nexport async function POST(request: NextRequest) {\n  const stream = new ReadableStream({\n    async start(controller) {\n      const startTime = Date.now()\n      let timer: NodeJS.Timeout | null = null\n      const tempFiles: string[] = []\n\n      try {\n        ndjson(controller, { type: 'progress', message: '‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...' })\n        \n        const formData = await request.formData()\n        const file = formData.get('file') as File\n        const engine = (formData.get('engine') as string) || 'openai'\n        const language = (formData.get('language') as string) || 'auto'\n        const translateTo = (formData.get('translateTo') as string) || ''\n\n        if (!file) {\n          ndjson(controller, { type: 'error', message: 'No file provided' })\n          controller.close()\n          return\n        }\n\n        const fileSizeMB = file.size / (1024 * 1024)\n        const inputPath = await saveBlobToTmp(file)\n        tempFiles.push(inputPath)\n\n        ndjson(controller, { type: 'progress', message: 'üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV...' })\n        const wavPath = await ffmpegToWav(inputPath)\n        tempFiles.push(wavPath)\n\n        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n        const duration = await getAudioDuration(wavPath)\n        const needsChunking = fileSizeMB > MAX_FILE_SIZE_MB || duration > CHUNK_DURATION_SEC\n\n        let wavFiles: string[] = []\n        \n        if (needsChunking) {\n          ndjson(controller, { \n            type: 'progress', \n            message: `üì¶ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (—Ñ–∞–π–ª ${fileSizeMB.toFixed(1)} MB, ${Math.floor(duration / 60)} –º–∏–Ω—É—Ç)...` \n          })\n          wavFiles = await splitAudioToChunks(wavPath, CHUNK_DURATION_SEC)\n          tempFiles.push(...wavFiles)\n        } else {\n          wavFiles = [wavPath]\n        }\n\n        ndjson(controller, { type: 'progress', message: 'üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...' })\n\n        timer = setInterval(() => {\n          ndjson(controller, {\n            type: 'progress',\n            message: `üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞... (${formatElapsedTime(Date.now() - startTime)})`\n          })\n        }, 5000)\n\n        // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤\n        let fullText = ''\n        for (let i = 0; i < wavFiles.length; i++) {\n          const chunkPath = wavFiles[i]\n          \n          if (wavFiles.length > 1) {\n            ndjson(controller, {\n              type: 'progress',\n              message: `üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}/${wavFiles.length}... (${formatElapsedTime(Date.now() - startTime)})`\n            })\n          }\n\n          const result = await transcribeOpenAI(chunkPath, language)\n          \n          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π\n          if (fullText && result.text) {\n            fullText += ' '\n          }\n          fullText += result.text\n          \n          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n          ndjson(controller, { type: 'partial', text: fullText })\n        }\n\n        if (timer) {\n          clearInterval(timer)\n          timer = null\n        }\n\n        // –ü–µ—Ä–µ–≤–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)\n        if (translateTo) {\n          ndjson(controller, { type: 'progress', message: 'üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞...' })\n          fullText = await maybeTranslate(fullText, translateTo)\n        }\n\n        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n        ndjson(controller, { type: 'final', text: fullText })\n        ndjson(controller, {\n          type: 'progress',\n          message: `‚úÖ –ì–æ—Ç–æ–≤–æ! (${formatElapsedTime(Date.now() - startTime)})`\n        })\n\n        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n        for (const tmpFile of tempFiles) {\n          await fs.unlink(tmpFile).catch(() => {})\n        }\n        \n        // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —á–∞–Ω–∫–∞–º–∏\n        if (needsChunking && wavFiles.length > 0) {\n          const chunkDir = path.dirname(wavFiles[0])\n          await fs.rm(chunkDir, { recursive: true, force: true }).catch(() => {})\n        }\n\n        controller.close()\n      } catch (error: any) {\n        console.error('Transcription error:', error)\n        \n        if (timer) clearInterval(timer)\n        \n        ndjson(controller, {\n          type: 'error',\n          message: error.message || 'Processing failed'\n        })\n        \n        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ\n        for (const tmpFile of tempFiles) {\n          await fs.unlink(tmpFile).catch(() => {})\n        }\n        \n        controller.close()\n      }\n    }\n  })\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'application/x-ndjson; charset=utf-8',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive'\n    }\n  })\n}"],"names":[],"mappings":"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","debugId":null}}]
}